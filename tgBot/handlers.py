from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram_dialog import DialogManager, StartMode
from api import link_telegram_id, get_tasks
from dialogs import task_dialog, TaskDialog

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
            [KeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@router.message(Command("start"))
async def start_command(message: Message):
    telegram_id = message.from_user.id
    success = await link_telegram_id(telegram_id)
    await message.answer(
        f"{'–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!' if success else '–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'} "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /add_task, /show_tasks:",
        reply_markup=get_main_menu()
    )

# –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á
async def display_tasks(message: Message):
    tasks = await get_tasks(message.from_user.id)
    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /add_task –∏–ª–∏ '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'!")
        return
    task_list = ["üìã <b>–ó–∞–¥–∞—á–∏:</b>\n"]
    for idx, task in enumerate(tasks, 1):
        status = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task["completed"] else "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        categories = ", ".join(task["categories"]) or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        task_list.append(
            f"<b>{idx}) {task['title']}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {task['created_at']}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {task['due_date']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await message.answer("\n".join(task_list), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–∫–æ–º–∞–Ω–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞)
@router.message(lambda m: m.text in ["/add_task", "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"])
async def add_task(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(TaskDialog.TITLE, mode=StartMode.RESET_STACK)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á (–∫–æ–º–∞–Ω–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞)
@router.message(lambda m: m.text in ["/show_tasks", "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏"])
async def show_tasks(message: Message):
    await display_tasks(message)

def setup_handlers(dp):
    dp.include_router(router)
    dp.include_router(task_dialog)